COQC = coqc -I . -Q extraction Proj -Q extraction/MenhirLib MenhirLib
COQDEP = coqdep -Q extraction Proj -Q extraction/MenhirLib MenhirLib
MENHIR = menhir
OCAMLBUILD = ocamlbuild -use-ocamlfind -use-menhir

EXTRACTED_DIR = extraction
PREPARE = parser

# Source files (generated by parser/Makefile)
VFILES = $(EXTRACTED_DIR)/Cabs.v $(EXTRACTED_DIR)/Parser.v $(EXTRACTED_DIR)/extraction.v 
VOFILES = $(VFILES:.v=.vo)

.PHONY: all prepare clean depend ocaml-build

all: prepare $(VOFILES) ocaml-build

# Prepare must produce all VFILES before we try to compile them
prepare: $(VFILES)
	@:

# Tell make how those files get there (copied by sub-make)
$(VFILES):
	$(MAKE) -C $(PREPARE) prepare

$(EXTRACTED_DIR)/%.vo: $(EXTRACTED_DIR)/%.v
	$(COQC) $<

# OCaml build
ocaml-build:
	cd $(EXTRACTED_DIR) && $(OCAMLBUILD) enter.native && mv enter.native ../

depend:
	$(COQDEP) $(VFILES) > .depend

clean: 
	find . -type f \( \
	    -name "*.vo" -o -name "*.glob" -o -name "*.vok" -o -name "*.vos" -o \
	    -name ".*.aux" -o -name ".depend" -o -name "*.byte" -o -name "*.native" -o \
	    -name "*.o" -o -name "*.cm*" -o -name "*.d.byte" -o -name "*.d.native" -o \
	    -name "*.ml.d" -o -name "Parser.v" -o -name "Parser.mli" -o -name "Parser.ml" \
	\) -exec rm -f {} +
	find $(EXTRACTED_DIR)/ -type f \
	    \( ! -name "_tags" -a ! -name "_CoqProject" -a ! -path "$(EXTRACTED_DIR)/MenhirLib/*" \) \
	    -exec rm -f {} +

-include .depend
